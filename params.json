{"name":"Angular Formus","tagline":"Form generator for AngularJS","body":"# Angular Formus\r\nCustomizable and extensible forms generator for AngularJS. License under MIT License.\r\n## Usage\r\nForm directive render form by configuration:\r\n```html\r\n<formus-form name=\"form.name\" \r\n    model=\"form.data\" \r\n    fieldsets=\"form.fieldsets\" \r\n    config=\"form.config\">\r\n</formus-form>\r\n```\r\n### Install\r\n```\r\n$ bower install -S angular-formus\r\n```\r\nAdd a `<script>` to your `index.html`:\r\n```html\r\n<script src=\"/bower_components/angular-formus/dist/formus.min.js\"></script>\r\n```\r\nand add Formus module as dependency to Your application:\r\n```js\r\nangular.module('app', ['formus']);\r\n```\r\n\r\n### Form configuration\r\n\r\nExample:\r\n```js\r\nform = {\r\n    name: \"systemParametersForm\",\r\n    fieldsets: {\r\n        fields: [{\r\n            \"name\": \"movePayments\",\r\n            \"label\": \"Move Payments Straight To Cash\",\r\n            \"input\": \"checkbox\"\r\n        }, {\r\n            \"name\": \"cancelPendingAfter\",\r\n            \"label\": \"Automatically Cancel Pending Mode Bookings after\",\r\n            \"input\": \"textbox\",\r\n            \"suffix\": \"days\"\r\n        }]\r\n    },\r\n    config: {\r\n        class: 'some-css-class',\r\n        submit: {\r\n            title: 'Save',\r\n            handler: function() {\r\n                console.log('I\\'m submitted');\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n### Field configuration\r\nForm must has one general field, which contain others fields.\r\nExample of field declaration:\r\n```js\r\n{\r\n  name:'nameOfFieldInModel', // string\r\n  label: 'label', // string\r\n  fields: [] //array of objects\r\n  input:'typeOfInput' // string \r\n}\r\n```\r\nFields can contain nested fields.\r\nAll field attributes are optional except `input`.\r\nIf attribute `name` isn't set, that field must contain nested fields (attribute `fields`).\r\nYou can add custom attributes, they are available in view at object config.\r\nLinker can be overriden. E.g:\r\n```js\r\n{\r\n  name:'name',\r\n  linker:function($scope, $element, $attr, $http /**Some other services**){}\r\n}\r\n```\r\n\r\n### Available inputs \r\n- fieldset (container for other fields)\r\n- textbox\r\n- texarea\r\n- select\r\n- checkbox \r\n\r\n### Customization\r\n\r\nFormus supports customization of all module elements.\r\n\r\n#### Templates\r\n\r\nTo change input template just register it in `FormusTemplatesProvider`:\r\n```js\r\napp.config(['FormusTemplatesProvider', function (FormusTemplatesProvider) {\r\n  FormusTemplatesProvider.setTemplateUrl('color', 'views/formus/inputs/color.html');\r\n  FormusTemplatesProvider.setTemplateUrl('group', 'views/formus/inputs/group.html');\r\n  FormusTemplatesProvider.setTemplateUrl('file', 'views/formus/inputs/file.html');\r\n  FormusTemplatesProvider.setTemplateUrl('gallery', 'views/formus/inputs/gallery.html');\r\n}]);\r\n```\r\n\r\n#### Validation\r\nFormus supports data validation. Validators can be attached to every field.\r\n```js\r\n{\r\n  name: 'title',\r\n  input: 'textbox',\r\n  validators: {\r\n    required: true /** Key - validator name, Value - options **/\r\n  }\r\n}\r\n``` \r\nAvailable validators is contained in `FormusValidator` service.\r\nExample of adding custom validator:\r\n```js\r\napp.config(['FormusValidatorProvider', function (FormusValidatorProvider) {\r\n  FormusValidatorProvider.set('numeric', function (value, config, arg) {\r\n    if (value) {\r\n      if (!tools.validateNumerical(value)) {\r\n        return config.label + ' must be numerical';\r\n      }\r\n      if (typeof(arg) === 'object') {\r\n        if ((angular.isDefined(arg.min)) && (value < arg.min)) {\r\n          return config.label + ' must be > ' + arg.min;\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  });\r\n}]);\r\n```\r\nValidator function can take three parameters:\r\n- field value\r\n- field config\r\n- validator options\r\n\r\nThis validator can take options as object with property `min`, e.g:\r\n```js\r\nvalidators: {numeric: {min:0}}\r\n```\r\n\r\n##### Events\r\nFormus emit an event after validation:\r\n```js\r\n$rootScope.$on('Formus.validatedForm', function(event, name, isValid) {\r\n  /*Some stuff*/\r\n});\r\n``` \r\nTo validate form without submit:\r\n```js\r\n$rootScope.$broadcast('Formus.validateForm', 'myFormName');\r\n```\r\n\r\n#### Display back-end errors\r\nFor showing errors that return from server you can use attribute `errors` in `formus-form` directive.\r\nErrors must be object with properties named as form fields and errors it's array of strings, e.g: \r\n```js\r\n{\r\n  name:['Name must be longer']\r\n}\r\n```\r\n`FormusHelper` has special method for extracting errors from response.\r\nExample of setting errors:\r\n```js\r\nform.config.submit.handler = function() {\r\n  return save().then(function() {\r\n     $state.go('^.list');\r\n  }).catch(function(response) {\r\n    form.errors = FormusHelper.extractBackendErrors(response);\r\n  });\r\n};\r\n```\r\n\r\n#### Default Configurations\r\n\r\n`FormusConfig` service allows to set default configurations for every type of input.\r\nSetter take two params:\r\n- name of filed\r\n- callback which must return config object\r\n\r\n```js\r\napp.config(['FormusConfigProvider', function (FormusConfigProvider) {\r\n  FormusConfigProvider.set('datetime', function () {\r\n    return {\r\n      minView: 0,\r\n      startView: 0,\r\n      dataType: 'number',\r\n      dateFormat: 'shortDate'\r\n    }\r\n  });\r\n}]);\r\n```\r\n\r\n### Features\r\n\r\n#### Nested fields:\r\n\r\nYou can create form with nested fields:\r\n```js\r\nform = {\r\n    fieldsets: {\r\n        fields: [\r\n            {\"name\": \"val0\", \"label\": \"Text Value\", \"input\": \"checkbox\"},\r\n            {\"name\": \"someExtend\", \"fields\": [\r\n                    {\"name\": \"val1\", \"label\": \"Nested Value #1\", \"input\": \"textbox\"},\r\n                    {\"name\": \"val2\", \"label\": \"Nested Value #2\", \"input\": \"select\",\"items\":  [\r\n                            {\"value\":1, \"title\":\"opt 1\"},\r\n                            {\"value\":2, \"title\":\"opt 2\"}\r\n                        ]\r\n                    },\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n};\r\n```\r\nAs result get model:\r\n```js\r\n{\r\n    val0: true,\r\n    someExtend:{\r\n        val1: 'some text',\r\n        val2: 2\r\n    }\r\n}\r\n\r\n```\r\nYou can use dot notation:\r\n```js\r\nform = {\r\n    fieldsets: {\r\n        fields: [\r\n            {\"name\": \"base.first\", \"label\": \"Some Value\", \"input\": \"textbox\"},\r\n            {\"name\": \"base.second\", \"label\": \"Some Value#2\", \"input\": \"textbox\"},\r\n            {\"name\": \"other.value\", \"label\": \"Some Value#3\", \"input\": \"checkbox\"},\r\n        ]\r\n    }\r\n};\r\n```\r\nResult model:\r\n```js\r\n{\r\n    base:{\r\n        first: 'text val',\r\n        first: 'text val2',\r\n    },\r\n    other:{\r\n        value: false\r\n    }\r\n}\r\n```\r\n\r\n#### Forms Container\r\n\r\nFor comfortable work with large number of forms you can use `FormusContainer`.\r\nThis service provide global storage for form configs.\r\nConfiguration:\r\n```js\r\nvar formsConfiguration = {form1:{/**...**/}, form2:{/**...**/}};\r\napp.constant('FORMS_CONFIG', formsConfiguration);\r\n\r\napp.config(['FormusContainerProvider', 'FORMS_CONFIG', function (FormusContainerProvider, FORMS_CONFIG) {\r\n  FormusContainerProvider.setContainer(FORMS_CONFIG);\r\n}]);\r\n```\r\nAfter configuration you can use `FormusContainer` in controller:\r\n```js\r\nvar myCtrl = function($scope, FormusContainer){\r\n    $scope.form = FormusContainer.get('form1');\r\n}\r\n```\r\nDefault configuration of form can be set using `FormusConfig`.\r\n```js\r\napp.config(['FormusConfigProvider', function (FormusConfigProvider) {\r\n  FormusConfigProvider.set('form', function () {\r\n    return {\r\n        name: 'default-name',\r\n        fieldset: { fields: [] },\r\n        data: {},\r\n        config: {\r\n            buttons: [],\r\n            submit: { title: 'Save', handler: function() {} }\r\n        }\r\n    }\r\n  });\r\n}]);\r\n```\r\nTo extend a form configuration you can specify attribute `parent`. Formus will search container for form with that name and use its configuration.\r\n```js\r\n{\r\n    //form containter\r\n    parent: {\r\n        config:{\r\n            submit:{title:'Find'}\r\n        }\r\n    },\r\n    child: {\r\n        parent:'parent'\r\n    }\r\n}\r\n```\r\n\r\n#### Linkers\r\n\r\nYou can set custom linkers for special input types:\r\n```js\r\napp.config(['FormusLinkerProvider', function (FormusLinkerProvider) {\r\n    FormusLinkerProvider.setLinker('gallery', function ($scope, $element, fileUpload) {\r\n        $scope.uploadImage = function () {\r\n          if (fileUpload.isValid($element.find('.imgFileInput'))) {\r\n            alert('Select file');\r\n          } else {\r\n            fileUpload.upload($element.find('.imgFileInput')).then(function (response) {\r\n              $scope.model.push(response.data.url);\r\n            });\r\n          }\r\n        };\r\n        $scope.removeImage = function (index) {\r\n          $scope.model.splice(index, 1);\r\n        };\r\n        $scope.afterLoadTemplate = function () {\r\n          if (!Array.isArray($scope.model)) {\r\n            $scope.model = [];\r\n          }\r\n        }\r\n    });\r\n}]);\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}